build_agent{
    checkout([
        $class: 'GitSCM',
        branches: scm.branches,
        doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
        userRemoteConfigs: scm.userRemoteConfigs,
        extensions: scm.extensions.findAll{!(it instanceof jenkins.plugins.git.GitSCMSourceDefaults)} +
        [$class: 'CloneOption', noTags: false, shallow: false, honorRefspec: false] +
        [$class: 'SubmoduleOption', recursiveSubmodules: true]
    ])

    container('sdk'){
        build()

        withSonarQubeEnvironment target: "SonarQube",{
            if(env.CHANGE_ID)
                static_code_analysis(
                    'sonar.pullrequest.key': env.CHANGE_ID
                    'sonar.pullrequest.branch': env.BRANCH_NAME
                    'sonar.pullrequest.base': env.CHANGE_TARGET
                )
            else
                static_code_analysis()
        }        

        on_branch to: branch_build,{
            publish_snapshot()
        }

        on_tag to: release_candidate_tag_build,{
            def release_scope = get_release_scope()
            withGit url: scm.userRemoteConfigs.url, cred: scm.userRemoteConfigs.credentialsId,{
                publish_release_candidate()
            }
        }

        on_tag to: release_tag_build,{
            def release_scope = get_release_scope()
            withGit url: scm.userRemoteConfigs.url, cred: scm.userRemoteConfigs.credentialsId,{
                publish_release()
            }
        }
    }
}